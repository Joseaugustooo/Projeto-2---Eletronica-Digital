-- Arquivo: lcd_logic.tdf
-- Descrição: Exemplo de lógica controle para interface LCD 16x2
-- Autor: Malki-çedheq Benjamim
-- Data: 22/07/2023
TITLE "lcd_logic";

--frases com 16 caracteres, codificadas em ASCII
--"   ELETRONICA   "
--CONSTANT frase1_1 = B"00100000_00100000_00100000_01000101_01001100_01000101_01010100_01010010_01001111_01001110_01001001_01000011_01000001_00100000_00100000_00100000"; 
--"  Digital UFPE  "
--CONSTANT frase1_2 = B"00100000_00100000_01000100_01101001_01100111_01101001_01110100_01100001_01101100_00100000_01010101_01000110_01010000_01000101_00100000_00100000"; 
--"      AHDL      "
--CONSTANT frase2_1 = B"00100000_00100000_00100000_00100000_00100000_00100000_01000001_01001000_01000100_01001100_00100000_00100000_00100000_00100000_00100000_00100000"; 
--"FPGA Cyclone IV "
--CONSTANT frase2_2 = B"01000110_01010000_01000111_01000001_00100000_01000011_01111001_01100011_01101100_01101111_01101110_01100101_00100000_01001001_01010110_00100000"; 
CONSTANT zero = B"0011";
SUBDESIGN lcd_logic (
	clk      		: INPUT;  --clock principal			
	lcd_busy 		: INPUT;  --feedback do controlador (1)ocupado/(0)disponível		
	key[4..1]		: INPUT;  --botões
	q1_uni[4..1] : INPUT;
	q1_dec[4..1] : INPUT;
	q2_uni[4..1] : INPUT;
	q2_dec[4..1] : INPUT;
	q3_uni[4..1] : INPUT;
	q3_dec[4..1] : INPUT;
	q4_uni[4..1] : INPUT;
	q4_dec[4..1] : INPUT;
	q5_uni[4..1] : INPUT;
	q5_dec[4..1] : INPUT;
	q6_uni[4..1] : INPUT;
	q6_dec[4..1] : INPUT;
	lcd_e 			: OUTPUT; --retem os dados no controlador LCD
	lcd_bar[9..0]	: OUTPUT; --(9) rs (8) rw (7..0) dado char
)
VARIABLE
	lcd_enable 					: DFF;
	lcd_bus[9..0] 				: DFF;
	L1[127..0], L2[127..0] 	: NODE;
	
	char_cnt: MACHINE --instância de máquina de estados
					WITH STATES (
						 char_00, char_01, char_02, char_03,
						 char_04, char_05, char_06, char_07,
						 char_08, char_09, char_10, char_11,
						 char_12, char_13, char_14, char_15,
						 char_16, char_17, char_18, char_19,
						 char_20, char_21, char_22, char_23,
						 char_24, char_25, char_26, char_27,
						 char_28, char_29, char_30, char_31,
						 char_32, char_33, char_34						 
					);
BEGIN
	--atribuição contínua das saídas registradas
	lcd_enable.clk = clk;
	lcd_e = lcd_enable.q;
	
	lcd_bus[].clk = clk;
	lcd_bar[] = lcd_bus[].q;

	--seleção do conteúdo através do key1
	L1[] = zero,q1_dec[4..1],zero,q1_uni[4..1],zero,q2_dec[4..1],zero,q2_uni[4..1],zero,q3_dec[4..1],zero,q3_uni[4..1],zero,q4_dec[4..1],zero,q4_uni[4..1],zero,q5dec[4..1],zero,q5_uni[4..1],zero,q6_dec[4..1],zero,q6_uni[4..1];

	--sincronização da fsm
	char_cnt.clk = clk;
	
	IF (lcd_busy == B"0" AND lcd_enable == B"0") THEN
	  lcd_enable.d = B"1"; --habilita o LCD
	
		CASE char_cnt IS --verifica contador de caractere
			 WHEN char_00  => 
				lcd_bus[].d = (B"00", B"10000000"); --instrução para linha 1
				char_cnt = char_01;
				
			 WHEN char_01  => 
				lcd_bus[].d = (B"10", L1[127..120]); --primeiro caractere da linha 1
				char_cnt = char_02;
				
			 WHEN char_02  => 
				lcd_bus[].d = (B"10", L1[119..112]);
				char_cnt = char_03;
				
			 WHEN char_03  => 
				lcd_bus[].d = (B"10", L1[111..104]);
				char_cnt = char_04;
				
			 WHEN char_04  => 
				lcd_bus[].d = (B"10", L1[103..96]);
				char_cnt = char_05;
				
			 WHEN char_05  => 
				lcd_bus[].d = (B"10", L1[95..88]);
				char_cnt = char_06;
				
			 WHEN char_06  => 
				lcd_bus[].d = (B"10", L1[87..80]);
				char_cnt = char_07;
				
			 WHEN char_07  => 
				lcd_bus[].d = (B"10", L1[79..72]);
				char_cnt = char_08;
				
			 WHEN char_08  => 
				lcd_bus[].d = (B"10", L1[71..64]);
				char_cnt = char_09;
				
			 WHEN char_09  => 
				lcd_bus[].d = (B"10", L1[63..56]);
				char_cnt = char_10;
				
			 WHEN char_10 => 
				lcd_bus[].d = (B"10", L1[55..48]);
				char_cnt = char_11;
				
			 WHEN char_11 => 
				lcd_bus[].d = (B"10", L1[47..40]);
				char_cnt = char_12;
				
			 WHEN char_12 => 
				lcd_bus[].d = (B"10", L1[39..32]);
				char_cnt = char_13;
			 
			 WHEN char_13 => 
				lcd_bus[].d = (B"10", L1[31..24]);
				char_cnt = char_14;
				
			 WHEN char_14 => 
				lcd_bus[].d = (B"10", L1[23..16]);
				char_cnt = char_15;
				
			 WHEN char_15 => 
				lcd_bus[].d = (B"10", L1[15..8]);
				char_cnt = char_16;
				
			 WHEN char_16 => 
				lcd_bus[].d = (B"10", L1[7..0]); --último caractere da linha 1
				char_cnt = char_17;
				
			 WHEN char_17 => 
				lcd_bus[].d = (B"00", B"11000000"); --instrução para linha 2
				char_cnt = char_18;
				
			 WHEN char_18 => 
				lcd_bus[].d = (B"10", L2[127..120]); --primeiro caractere da linha 2
				char_cnt = char_19;
				
			 WHEN char_19 => 
				lcd_bus[].d = (B"10", L2[119..112]);
				char_cnt = char_20;
				
			 WHEN char_20 => 
				lcd_bus[] = (B"10", L2[111..104]);
				char_cnt = char_21;
				
			 WHEN char_21 => 
				lcd_bus[] = (B"10", L2[103..96]);
				char_cnt = char_22;
				
			 WHEN char_22 => 
				lcd_bus[].d = (B"10", L2[95..88]);
				char_cnt = char_23;
				
			 WHEN char_23 => 
				lcd_bus[].d = (B"10", L2[87..80]);
				char_cnt = char_24;
				
			 WHEN char_24 => 
				lcd_bus[].d = (B"10", L2[79..72]);
				char_cnt = char_25;
				
			 WHEN char_25 => 
				lcd_bus[].d = (B"10", L2[71..64]);
				char_cnt = char_26;
				
			 WHEN char_26 => 
				lcd_bus[].d = (B"10", L2[63..56]);
				char_cnt = char_27;
				
			 WHEN char_27 => 
				lcd_bus[].d = (B"10", L2[55..48]);
				char_cnt = char_28;
				
			 WHEN char_28 => 
				lcd_bus[].d = (B"10", L2[47..40]);
				char_cnt = char_29;
				
			 WHEN char_29 => 
				lcd_bus[].d = (B"10", L2[39..32]);
				char_cnt = char_30;
				
			 WHEN char_30 => 
				lcd_bus[].d = (B"10", L2[31..24]);
				char_cnt = char_31;
				
			 WHEN char_31 => 
				lcd_bus[].d = (B"10", L2[23..16]);
				char_cnt = char_32;
				
			 WHEN char_32 => 
				lcd_bus[].d = (B"10", L2[15..8]);
				char_cnt = char_33;
				
			 WHEN char_33 => 
				lcd_bus[].d = (B"10", L2[7..0]);--último caractere da linha 2		
				char_cnt = char_00;

			 WHEN OTHERS => 
				lcd_enable.d = B"0"; --desabilita o LCD
				char_cnt = char_00;
		END CASE;

		ELSE
	  lcd_enable.d = B"0"; --desabilita o LCD
	END IF;
	
END;
